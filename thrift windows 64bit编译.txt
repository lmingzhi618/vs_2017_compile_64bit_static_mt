thrift windows 64bit编译
1. 安装依赖库 boost, libevent, openssl
2. thrift在Windows下的安装
	1) 解压缩源代码，进入到lib\cpp目录下，打开Thrift.sln，里面有libthrift和libthriftnb两个工程，
		libthrift工程是常规的阻塞型server端（单线程server，一个连接一个线程server，线程池server），
		libthriftnb工程是非阻塞（non-blocking）模式的服务server端，也只有编译libthriftnb时才需要依赖libevent库，否则可以不编译libevent库；
	2) 设置依赖库头文件和库文件，这就不再介绍了；
	3) 设置C\C++->代码生成->运行库 设为 MT
x	4) libthrift 项目 server目录添加以下文件 ：
		TConnectedClient.h 
		TConnectedClient.cpp 
		TServerFramework.h 
		TServerFramework.cpp 
	5) 编译信息 src\thrift\server\tserverframework.cpp(222): error C2589: “(”:“::”右边的非法标记
		（1）项目属性->C++->预处理器->预处理器定义：添加宏： NOMINMAX   -> NG
		（6）用括号将 std::max 括起来，如　(std::max)(hwm_, clients);	-> OK
	6) 编译信息 warning C4996: 'std::tr1'  ->可忽略 
		std::tr1 命名空间已弃用
		现在，非标准 std::tr1 命名空间在 C++14 和 C++17 这两种模式中均标记为已弃用。 在 Visual Studio 2017 版本 15.5 中，以下代码引发错误 C4996：
		thrift/cxxfunctional.h:77 
			use std::tr1::function;   -->  use std::function;
			参考: https://docs.microsoft.com/zh-cn/cpp/cpp-conformance-improvements-2017
	7) thrift 库项目->async目录添加以下文件:
		TConcurrentClientSyncInfo.cpp 
	8) thrift 库项目->protocol目录添加以下文件:
		TProtocol.cpp 
	9) thrift 库项目添加以下文件:
		TOutput.cpp
	10) TNonblockingServer() 使用 BoostThreadFactory 异常 :
		boost::shared_ptr<BoostThreadFactory> threadFactory = boost::shared_ptr<BoostThreadFactory>(new BoostThreadFactory());
		threadManager->threadFactory(threadFactory);
		threadManager->start();
		TNonblockingServer server(processor1, protocolFactory1, 8000, threadManager);
		
		windows/config.h文件添加以下宏定义：
		#undef USE_STD_THREAD
		#define USE_BOOST_THREAD 1
		
	11) rror LNK2001: 无法解析的外部符号 "public: __cdecl apache::thrift::concurrency::BoostThreadFactory:
		(1) thrift/windows/config.h文件,因为vs版本原因(vs2017:1913),导致USE_BOOST_THREAD被屏蔽
			#if _MSC_VER >= 1700
			#define USE_STD_THREAD 1
			// otherwise use boost threads
			#else
			#define USE_BOOST_THREAD 1
			#endif

		(2) 在文件  thrift\concurrency\PlatformThreadFactory.h 中有以下定义: 
			根据平台选择要包含的头文件 
			#if USE_BOOST_THREAD
			#  include <thrift/concurrency/BoostThreadFactory.h>
			#elif USE_STD_THREAD
			#  include <thrift/concurrency/StdThreadFactory.h>
			#else
			#  include <thrift/concurrency/PosixThreadFactory.h>
			#endif
		(3) 修改 thrift/windows/config.h 文件:
			#if _MSC_VER >= 1700
			#define USE_STD_THREAD 1
			// otherwise use boost threads
			#else
			#define USE_BOOST_THREAD 1
			#endif
		+	#define USE_STD_THREAD 0
		+	#define USE_BOOST_THREAD 1
		
		参考: https://issues.apache.org/jira/browse/THRIFT-4258
	12) 程序“[10320] test.exe”已退出，返回值为 255 (0xff) 
		boost-1.6.3不支持vs2017，用boost-1.6.4 -->验证 OK
		
		参考: 	https://svn.boost.org/trac10/ticket/12914?replyto=description
				https://dl.bintray.com/boostorg/release/1.63.0/binaries/
				https://dl.bintray.com/boostorg/release/1.64.0/binaries/
			

3. 编译完成，会在lib\cpp\release目录下生成libthrift.lib和libthriftnb.lib

4. 说明： 
	thrift-0.9.3这一版的release其实在windows下是编译不过的，因为vs工程中要编译的Thrift.cpp已经不存在了，从工程中移除就可以顺利编译了，参考thrift-pull-739。
	另外还可以自行编译thrift文件的生成工具，当然也可以直接从官网下载：http://archive.apache.org/dist/thrift/0.9.3/
	编译步骤：
		将compiler\cpp\src\windows\version.h.in文件拷贝到compiler\cpp\src\目录下，并重命名为version.h；
		到compiler\cpp目录下，打开compiler.sln，编译即可
